Kreacijski patterni:

1. Adapter pattern
-Budući da klasa GlasanjeViewModel sadrži 3 interfejsa, od kojih se jedan bavi analizom glasačkog sistema, a drugi objavljivanjem na Twitter,
ukoliko bi se kreirao još jedan glasački sistem (npr. odvojen za lokalne i opće izbore) ili ukoliko bi se trebalo objavljivati na Twitter
i praviti analize bez obzira na činjenicu što nisu u toku izbori, bilo bi neophodno mijenjati date klase i njihove implementacije tih
interfejsa, što nije dobro.
-Potrebno je kreirati Adapter klasu koja će naslijediti interfejse Analiza i Twitter te ih implementirati na način koji odgovara
novim funkcionalnostima potrebnim u budućnosti. Na ovaj način klasni sistem će biti otvoren za nadogradnju, a zatvoren za promjene.
2. Facade pattern
-Ovaj pattern pravi poveznicu između korisničkih interfejsa (tj. formi), i logičkog pogleda sistema. Za implementaciju ovog metoda, potrebno je
napraviti klasu Facade koja bi objedinjavala sve logičke dijelove sistema. ViewModeli predstavljaju logički dio sistema, te bi bilo potrebno napraviti
jednu klasu koja sadržavala ViewModele i koja bi navigirala njima zavisno od korisničke interakcije sa sistemom.
3. Decorator pattern
 -Ovaj patern omogućava dinamičko dodavanje novih elemenata i ponašanja (funkcionalnosti) postojećim objektima. Kako je moguće da jedan glasač glasa za kandidate koji pripadaju različitim strankama (ovo trenutno nije realizovano - možda pri proširivanju aplikacije kada glasač bude mogao glasati za više kadidata različitih pozicija) i da još uz to bira željenu stranku (odabrani kandidati ne moraju pripadati toj stranki), potrebno mu je omogućiti različite mogućnosti glasanja.
4. Bridge pattern
-Ovaj pattern odvaja apstrakciju od njegove implementacije, tako da se ta dva mogu razlikovati. Osmišljen je da odvoji interfejs klase od njegove primjene, tako da se može mijenjati implementacija bez promjene koda klijenta.
Mogao bi se primjeniti pri nasljeđivanju interfejsa ITwitter ili Baza.
5. Proxy pattern
-Klasa AdministratorViewModel, između ostalog, bavi se i provjerom da li osoba koja pokušava pristupiti posebnim opcijama ima ovlasti za takvo nešto.
Budući da je veoma važno zaštititi ovu klasu i njene mogućnosti od neovlaštenog pristupa, potrebno je uvesti Proxy klasu koja će onemogućiti
pristup metodama i promjenu podataka ukoliko korisnik nema odgovarajuće korisničke podatke.
-Klasa AdministratorViewModel treba se deklarisati kao privatna, te je potrebno napraviti novu Proxy klasu koja će izvršiti kreiranje instance
klase AdministratorViewModel. Kada korisnik unese korisničke podatke, pozvati će se metoda Authenticate koja će instancirati klasu samo ukoliko
su uneseni ispravni korisnički podaci.
6. Composite pattern
-Osnovna namjena ovag paterna jeste da omogući formiranje strukture stabla pomoću klasa, u kojoj se individualni objekti (listovi stabla) i kompozicije individualnih objekata (korijeni stabla) jednako tretiraju. Koristi se ukoliko postoji potreba da klijenti budu u mogućnosti da zanemare razliku između kompozicija objekata i pojedinačnih objekata. Klijenti će tretirati sve objekte u složenoj strukturi ravnomjerno. Ovo se može odnositi na korisnike aplikacije, tačnije glasače, koji će na sve kandidate tretirati podjednako, iako su u suštini različiti, odnosno mogu se kadidovati za različite pozicije (ovo se odnosi na proširenje aplikacije različitim pozicijama za koje se kandidati mogu kandidovati).
7. Flyweight pattern
-Uloga flyweight patterna je da smanji potrošnju memorije time što će "reciklirati" objekte koji se interno ne razlikuju jedan od drugog.
No, kako su u našim klasama svi atributi jedne instance, različiti od atributa druge instance, te se ne mogu uspostaviti interne, zajedničke karakteristike,
tako ovaj pattern nije primjenjiv za naš sistem. 

Kreacijski patterni:

1. Singleton pattern
-U klasnom modelu postoji nekoliko klasa koje ne bi trebalo biti moguće instancirati više puta - AdministratorViewModel, GlasanjeViewModel i
OstaleFunkcionalnostiViewModel. Ukoliko bi bilo više instanci ovih klasa, bilo bi više načina da se unese glas, obrišu podaci korisnika ili prikažu
najvažnije informacije, što bi bilo neprihvatljivo. Zbog toga je potrebno onemogućiti da se kreira više objekata ovih klasa.
-Potrebno je kreirati klasu Singleton koja će instancirati željenu klasu. Ta klasa će posjedovati metodu koja će uvijek vraćati istu instancu.
2. Prototype pattern
-Glavni cilj ovo patterna jeste smanjiti troškove pri kreiranju novog objekta. Ako je trošak kreiranja novog objekta velik i kreiranje objekta je resursno zahtjevno tada se vrši kloniranje već postojećeg objekata. Prototype dizajn patern dozvoljava da se kreiraju prilagođeni objekti bez poznavanja njihove klase ili detalja kako je objekat kreiran. Ovo bi se moglo u budućnosti koristiti za realizaciju printanja različitih glasačkih listića za različite glasače i tipove izbora (za sada se printa samo listić za opće izbore).
3. Factory Method pattern
-Ovaj pattern koristi posebne metode za instanciranje objekata umjesto konstruktora, kada nam je potrebno da ne navodimo koja tacno klasa ce biti instancirana.
U našem sistemu postoji samo jedna abstraktna klasa (Osoba), koja je generalizacija klasa Kandidat i Glasač. Kako nam je u svakom trenutku poznato koji tip instance
nam treba, tj. ne treba nam metoda da utvrdimo šta trebamo kreirati, tako ovaj pattern nije primjenjiv na naš sistem.
4. Abstract Factory pattern
-Slično kao prethodni patern, i ovaj patern koristi metode za instanciranje objekata, umjesto konstruktora, samo što ovaj pattern ima jednu "SuperFactory" koja
kontroliše instanciranje svih tipova objekta u sistemu. Kako je nama u svakom trenutku poznato koji tip instance nam treba, tj. ne treba nam metoda da utvrdimo 
šta trebamo kreirati, tako ovaj pattern nije primjenjiv na naš sistem.
5. Builder pattern
-Budući da se u klasnom modelu ne implementira "gradnja" od više dijelova, te nema ni više klasa koje bi na različite načine "gradile" objekte,
Builder pattern se ne može primijeniti. U klasnom modelu nema prosljeđivanja objekata klasa kao parametara više puta između više klasa s jednim konačnim
rezultatom, te automatski nema ni mogućnosti da se primijeni ovaj pattern.
